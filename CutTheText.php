<?php
// Выполняя это задание, я вынес в параметры функции все параметры, которые так или иначе фигурировали в ТЗ.
// Мне показалось, что лучше контролировать линк, количество слов для гиперссылки и общую длину текста через параметры
// по умолчанию, чем потом капаться в коде. Начнем!
function CutTheText(string $text, string $link = 'https://clck.ru/F7icL', int $linkWords = 3, int $length = 250): void
{
    // В ТЗ была указана длина финального текста в 250 символов, а также необходимость поставить многоточие в конце.
    // Насколько мне известно, даже печатники используют три точки, а не спецсимвол, поэтому я посчитал, что сам текст
    // должен быть 247 символов, к которым мы добавим три символа многоточия.
    $finalLength = $length - 3;


    // Делаем проверку на передачу в функцию именно строки.
    if (gettype($text) !== 'string') {
        exit('Для выполнения скрипта нужен текст');
    }

    // Я понимаю, что данная задача -- теоретическая. Но из ТЗ я не совсем понял, может ли анонс быть меньше, чем 250 символов.
    // В целом, текст, например, заметки может быть настолько коротким, но в задании указано "с большими публикациями".
    // В случае обязательного соответствия ровно в 250 символов мы можем организовать такую проверку.
    // Если нет -- просто комментируем эти строчки.
    if (mb_strlen($text) < $finalLength) {
        exit('Слишком короткий текст! Замените его и попробуйте снова');
    }

    // Далее отрезаем от строчки нужный нам кусок. Также не забываем, что лучше отрезать все пробелы, на которые
    // мы могли попасть при обрезке. Используем trim().
    $cuttedText = trim(mb_substr($text, 0, $finalLength));

    // Переводим в массив, чтобы было удобнее работать со словами, которые стали индексируемым элементами массива.
    // Из-за того, что мы воспользовались trim(), обрезка через сепаратор ' ' прошла корректно. К сожалению, это
    // не защитит нас от случайного обрезания слов в самых неожиданных местах.
    $cuttedTextArray = explode(' ', $cuttedText);

    // Нам нужно вычленить последние три слова, пользуемся array_slice() с отрицательным вторым аргументом.
    $threeLastWord = array_slice($cuttedTextArray, -$linkWords, $linkWords);

    // Теперь нарезаем основной текст: просто удаляем последние три элемента, в которых будет зашита ссылка.
    $howMuchElements = count($cuttedTextArray);
    $mainText = array_slice($cuttedTextArray, 0, $howMuchElements - $linkWords);

    // С массивами закончили, пора переводить их в строчки, готовые для сшивания вместе.
    $linkedText = implode(' ', $threeLastWord);
    $firstTextPart = implode(' ', $mainText);

    // Создаем шаблон, который позволит нам вставить ссылку в текст. По сути, склеиваем части строчек вместе.
    $lastTextPart = '<a href="'.$link.'">'.$linkedText.'</a>';

    // Выводим удобным для пользователя способом. Например, через echo :)
    echo $firstTextPart . ' ' . $lastTextPart . '...';

}

CutTheText('Практический опыт показывает, что начало повседневной работы по формированию позиции напрямую зависит от направлений прогрессивного развития. Повседневная практика показывает, что дальнейшее развитие различных форм деятельности обеспечивает широкому кругу специалистов участие в формировании системы масштабного изменения ряда параметров. Равным образом реализация намеченного плана развития обеспечивает широкому кругу специалистов участие в формировании существующих финансовых и административных условий!');